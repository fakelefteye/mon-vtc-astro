---
// src/components/Header.astro
const { currentPath = '/' } = Astro.props;

// Détermine la langue active basée sur le chemin actuel
const lang = currentPath.startsWith('/en/') ? 'en' : (currentPath.startsWith('/es/') ? 'es' : 'fr');

// --- Textes de navigation par langue ---
const navTexts = {
    fr: {
        home: 'Accueil',
        services: 'Nos Tarifs', // Le texte reste "Nos Prestations"
        vehicles: 'Nos Véhicules', 
        contact: 'Contact',
        book: 'Réserver',
    },
    en: {
        home: 'Home',
        services: 'Pricing', // Le texte reste "Our Services"
        vehicles: 'Our Vehicles', 
        contact: 'Contact',
        book: 'Book Now',
    },
    es: {
        home: 'Inicio',
        services: 'Precios', // Le texte reste "Nuestros Servicios"
        vehicles: 'Nuestros Vehículos', 
        contact: 'Contacto',
        book: 'Reservar Ahora',
    },
};

// --- Mappage des chemins de base vers leurs noms de fichiers (sans préfixe de langue) ---
// Ceci est crucial pour construire les URLs localisées correctement.
const basePaths = {
    '/': '/',
    '/nos-tarifs': '/nos-tarifs', // <-- MODIFIÉ : Le chemin de base FR est maintenant 'nos-tarifs'
    '/vehicule': '/vehicule',
    '/contact': '/contact',
    // Ajoutez d'autres pages ici si nécessaire (ex: '/politique-confidentialite')
};

// Détermine le chemin de base actuel sans la partie langue.
// Ex: '/en/our-services' -> '/nos-prestations' (si mappé)
let currentBasePath = '/';
for (const [key, value] of Object.entries(basePaths)) {
    // On doit faire attention aux pages d'accueil et s'assurer que /en ne matche pas /
    if (lang === 'en' && currentPath.startsWith('/en') && currentPath.replace('/en', '') === value) {
        currentBasePath = key;
        break;
    }
    if (lang === 'es' && currentPath.startsWith('/es') && currentPath.replace('/es', '') === value) {
        currentBasePath = key;
        break;
    }
    if (lang === 'fr' && (currentPath === value || currentPath.startsWith(`/fr${value}`))) { // Gère /fr/page aussi
        currentBasePath = key;
        break;
    }
    if (lang === 'fr' && currentPath === '/' && value === '/') { // Cas spécifique pour la page d'accueil FR
        currentBasePath = key;
        break;
    }
}
// Pour les pages non mappées ou quand le chemin est juste la langue (ex: /en), on reste sur la racine.
if (!Object.values(basePaths).includes(currentBasePath)) {
     currentBasePath = '/'; // Fallback si le chemin ne correspond à aucune page de base connue
}
if (currentPath === '/en' || currentPath === '/en/' || currentPath === '/es' || currentPath === '/es/') {
    currentBasePath = '/'; // Si on est juste sur le préfixe de langue, on considère que c'est l'accueil
}


// --- Fonctions pour générer les liens dynamiques ---
const getLocalizedLink = (basePath: string, targetLang: string) => {
    // Si la page est l'accueil, les liens sont '/' ou '/en/' ou '/es/'
    if (basePath === '/') {
        return targetLang === 'fr' ? '/' : `/${targetLang}/`;
    }
    
    // Pour les autres pages, on utilise le chemin de base FR et on le préfixe
    const localizedPaths: Record<string, string> = {
        fr: basePath, // ex: '/nos-tarifs'
        en: basePath
            .replace('/nos-tarifs', '/pricing') // <-- MODIFIÉ : Traduction du chemin pour EN
            .replace('/vehicule', '/vehicle'),
        es: basePath
            .replace('/nos-tarifs', '/Precios') // <-- MODIFIÉ : Traduction du chemin pour ES
            .replace('/vehicule', '/vehiculo'),
    };
    
    const path = localizedPaths[targetLang] || basePath; // Utilise la version traduite du chemin
    return targetLang === 'fr' ? path : `/${targetLang}${path}`;
};


// Génère les chemins d'URL complets pour la navigation
const homeLink = getLocalizedLink('/', lang);
const servicesLink = getLocalizedLink('/nos-tarifs', lang); // <-- MODIFIÉ : Utilise le nouveau chemin de base
const vehiclesLink = getLocalizedLink('/vehicule', lang);
const contactLink = getLocalizedLink('/contact', lang);
const bookingAnchor = getLocalizedLink('/#booking', lang);

// Fonction pour déterminer si un lien de navigation est actif
const isNavLinkActive = (basePathKey: string) => {
    return currentBasePath === basePathKey;
};
---

<header class="header">
    <div class="header-main">
        <a href={homeLink} class="logo">
            <img src="https://pub-d35dc23058ee46aca93fb6f682ad5e37.r2.dev/logo_ship_cars.png" alt="ShipCars Logo">
        </a>
        
        <div class="header-actions">
            <nav class="nav">
                <a href={homeLink} class:list={{ active: isNavLinkActive('/') }}>{navTexts[lang].home}</a>
                <a href={servicesLink} class:list={{ active: isNavLinkActive('/nos-tarifs') }}>{navTexts[lang].services}</a> {/* <-- MODIFIÉ : Check d'activité */}
                <a href={vehiclesLink} class:list={{ active: isNavLinkActive('/vehicule') }}>{navTexts[lang].vehicles}</a>
                <a href={contactLink} class:list={{ active: isNavLinkActive('/contact') }}>{navTexts[lang].contact}</a>
            </nav>
            
            <div class="language-picker"> 
                <a href={getLocalizedLink(currentBasePath, 'fr')} class:list={{ active: lang === 'fr' }} aria-label="Choisir le Français">FR</a> 
                <a href={getLocalizedLink(currentBasePath, 'en')} class:list={{ active: lang === 'en' }} aria-label="Choose English">EN</a> 
                <a href={getLocalizedLink(currentBasePath, 'es')} class:list={{ active: lang === 'es' }} aria-label="Elegir Español">ES</a> 
            </div>

            <a href={bookingAnchor} class="header-cta">
                {navTexts[lang].book}
            </a>
        </div>
    </div>
</header>

<style>
    /* Vos styles CSS existants, inchangés */
    .header {
        background-color: var(--dark-bg);
        padding: 0.75rem 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        z-index: 1000;
        position: sticky;
        top: 0;
    }

    .header-main {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 1.5rem;
    }

    .logo img {
        height: 50px;
        width: auto;
        display: block;
    }

    .header-actions {
        display: flex;
        align-items: center;
        gap: 2rem;
    }

    .nav {
        display: flex;
        gap: 2rem;
    }

    .nav a {
        color: white;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
    }

    .nav a:hover {
        color: var(--accent);
    }
    
    .nav a.active {
        color: var(--accent); /* Met en surbrillance le lien actif */
        border-bottom: 2px solid var(--accent);
        padding-bottom: 3px;
    }

    .language-picker {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .language-picker a {
        color: white;
        background-color: transparent;
        border: 1px solid rgba(255, 255, 255, 0.4);
        padding: 0.3rem 0.6rem;
        border-radius: 5px;
        text-decoration: none;
        font-size: 0.9em;
        font-weight: bold;
        opacity: 0.7;
        transition: all 0.3s ease;
    }

    .language-picker a:hover {
        opacity: 1;
        background-color: rgba(255, 255, 255, 0.1);
    }

    .language-picker a.active {
        opacity: 1;
        background-color: var(--accent);
        border-color: var(--accent);
        color: white;
    }

    .header-cta {
        background-color: var(--accent);
        color: white;
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        text-decoration: none;
        font-weight: bold;
        transition: all 0.3s ease;
        white-space: nowrap; 
    }
    .header-cta:hover {
        background-color: #fff;
        color: var(--dark-bg);
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }

    @media (max-width: 850px) {
        .header-main {
            flex-direction: column;
            gap: 1.5rem;
        }
        .header-actions {
            flex-direction: column;
            gap: 1.5rem;
            width: 100%;
        }
        .nav {
            justify-content: center;
            width: 100%;
            flex-wrap: wrap; 
        }
        .nav a {
            padding: 0.5rem 0.75rem; 
        }
    }
</style>