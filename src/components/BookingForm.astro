---
// src/components/BookingForm.astro
// Le composant accepte maintenant une propri√©t√© "lang" pour savoir quelle langue afficher
export interface Props {
    lang: 'fr' | 'en' | 'es';
}
// 'fr' est la langue par d√©faut si la prop "lang" n'est pas fournie
const { lang = 'fr' } = Astro.props;

// Dictionnaire de traductions pour tous les textes du formulaire
const t = {
    fr: {
        formTitle: "Demande de Devis et R√©servation",
        formSubtitle: "Obtenez une estimation et r√©servez votre trajet.",
        step1Title: "1. Vos Coordonn√©es",
        nameLabel: "Nom & Pr√©nom",
        namePlaceholder: "Ex: Marie Dupont",
        emailLabel: "Adresse E-mail",
        emailPlaceholder: "Pour recevoir le bon de r√©servation",
        phoneLabel: "T√©l√©phone",
        phonePlaceholder: "Pour vous contacter si besoin",
        passengersLabel: "Nombre de passagers",
        step2Title: "2. D√©tails du Trajet",
        pickupLabel: "Adresse de d√©part",
        pickupPlaceholder: "Commencez √† taper une adresse...",
        dropoffLabel: "Adresse de destination",
        dropoffPlaceholder: "Commencez √† taper une adresse...",
        bookingTimeLabel: "Date et heure de la prise en charge",
        specialRequestsLabel: "Demandes particuli√®res",
        specialRequestsPlaceholder: "Ex: Si√®ge b√©b√©, bagages volumineux...",
        privacyNotice: `En soumettant ce formulaire, vous reconnaissez avoir pris connaissance de notre <a href="/politique-confidentialite" target="_blank">politique de confidentialit√©</a> et vous l'acceptez.`,
        estimateButton: "Estimer le Prix",
        calculating: "Calcul en cours...",
        priceEstimated: "Prix estim√© :",
        step3Title: "3. Confirmez votre r√©servation",
        payOnlineButton: "üí≥ Payer en ligne",
        bookOnboardButton: "üöó R√©server & Payer √† bord",
        stripeNotReady: "Le service de paiement n'est pas pr√™t. Veuillez rafra√Æchir la page.",
        bookingFailed: "La r√©servation a √©chou√©.",
        sessionIDMissing: "ID de session manquant.",
        calculationError: "Erreur de calcul.",
        unknownError: "Erreur inconnue",
        preparingPayment: "Pr√©paration du paiement...",
        savingBooking: "Enregistrement de la r√©servation...",
    },
    en: {
        formTitle: "Quote Request and Booking",
        formSubtitle: "Get an estimate and book your ride.",
        step1Title: "1. Your Contact Information",
        nameLabel: "Full Name",
        namePlaceholder: "Ex: John Doe",
        emailLabel: "Email Address",
        emailPlaceholder: "To receive the booking confirmation",
        phoneLabel: "Phone",
        phonePlaceholder: "To contact you if needed",
        passengersLabel: "Number of passengers",
        step2Title: "2. Trip Details",
        pickupLabel: "Pickup address",
        pickupPlaceholder: "Start typing an address...",
        dropoffLabel: "Destination address",
        dropoffPlaceholder: "Start typing an address...",
        bookingTimeLabel: "Pickup date and time",
        specialRequestsLabel: "Special requests",
        specialRequestsPlaceholder: "Ex: Baby seat, bulky luggage...",
        privacyNotice: `By submitting this form, you acknowledge you have read and agree to our <a href="/en/privacy-policy" target="_blank">privacy policy</a>.`,
        estimateButton: "Estimate Price",
        calculating: "Calculating...",
        priceEstimated: "Estimated price:",
        step3Title: "3. Confirm your booking",
        payOnlineButton: "üí≥ Pay Online",
        bookOnboardButton: "üöó Book & Pay Onboard",
        stripeNotReady: "Payment service is not ready. Please refresh the page.",
        bookingFailed: "Booking failed.",
        sessionIDMissing: "Session ID missing.",
        calculationError: "Calculation error.",
        unknownError: "Unknown error",
        preparingPayment: "Preparing payment...",
        savingBooking: "Saving booking...",
    },
    es: {
        formTitle: "Solicitud de Presupuesto y Reserva",
        formSubtitle: "Obtenga un presupuesto y reserve su viaje.",
        step1Title: "1. Sus Datos de Contacto",
        nameLabel: "Nombre y Apellido",
        namePlaceholder: "Ej: Mar√≠a Garc√≠a",
        emailLabel: "Correo Electr√≥nico",
        emailPlaceholder: "Para recibir el comprobante de reserva",
        phoneLabel: "Tel√©fono",
        phonePlaceholder: "Para contactarle si es necesario",
        passengersLabel: "N√∫mero de pasajeros",
        step2Title: "2. Detalles del Viaje",
        pickupLabel: "Direcci√≥n de recogida",
        pickupPlaceholder: "Empiece a escribir una direcci√≥n...",
        dropoffLabel: "Direcci√≥n de destino",
        dropoffPlaceholder: "Empiece a escribir una direcci√≥n...",
        bookingTimeLabel: "Fecha y hora de recogida",
        specialRequestsLabel: "Solicitudes especiales",
        specialRequestsPlaceholder: "Ej: Silla de beb√©, equipaje voluminoso...",
        privacyNotice: `Al enviar este formulario, usted reconoce haber le√≠do y aceptado nuestra <a href="/es/politica-privacidad" target="_blank">pol√≠tica de privacidad</a>.`,
        estimateButton: "Estimar Precio",
        calculating: "Calculando...",
        priceEstimated: "Precio estimado:",
        step3Title: "3. Confirme su reserva",
        payOnlineButton: "üí≥ Pagar en l√≠nea",
        bookOnboardButton: "üöó Reservar y Pagar a bordo",
        stripeNotReady: "El servicio de pago no est√° listo. Por favor, actualice la p√°gina.",
        bookingFailed: "La reserva fall√≥.",
        sessionIDMissing: "ID de sesi√≥n faltante.",
        calculationError: "Error de c√°lculo.",
        unknownError: "Error desconocido",
        preparingPayment: "Preparando pago...",
        savingBooking: "Guardando reserva...",
    },
}[lang];
---
<div id="booking-container" class="booking-wrapper">
    <h2 class="form-title">{t.formTitle}</h2>
    <p class="form-subtitle">{t.formSubtitle}</p>

    <form id="quote-form" class="form-grid">
        <div class="form-group full-width"><h3 class="step-title">{t.step1Title}</h3></div>
        
        <div class="form-group full-width">
            <label for="name">{t.nameLabel}</label>
            <input type="text" id="name" name="name" required placeholder={t.namePlaceholder}>
        </div>
        <div class="form-group full-width">
            <label for="email">{t.emailLabel}</label>
            <input type="email" id="email" name="email" required placeholder={t.emailPlaceholder}>
        </div>
        <div class="form-group">
            <label for="phone">{t.phoneLabel}</label>
            <input type="tel" id="phone" name="phone" required placeholder={t.phonePlaceholder}>
        </div>
        <div class="form-group">
            <label for="passengers">{t.passengersLabel}</label>
            <input type="number" id="passengers" name="passengers" required min="1" max="4" value="1">
        </div>

        <div class="form-group full-width"><h3 class="step-title">{t.step2Title}</h3></div>
        <div class="form-group"><label for="pickup">{t.pickupLabel}</label><input type="text" id="pickup" name="pickup" required placeholder={t.pickupPlaceholder}></div>
        <div class="form-group"><label for="dropoff">{t.dropoffLabel}</label><input type="text" id="dropoff" name="dropoff" required placeholder={t.dropoffPlaceholder}></div>
        <div class="form-group full-width"><label for="booking-time">{t.bookingTimeLabel}</label><input type="datetime-local" id="booking-time" name="bookingTime" required></div>
        <div class="form-group full-width"><label for="specialRequests">{t.specialRequestsLabel}</label><textarea id="specialRequests" name="specialRequests" rows="3" placeholder={t.specialRequestsPlaceholder}></textarea></div>

        <div class="form-group full-width privacy-notice">
            <p>E <a href={t.privacyNotice}</p>
        </div>

        <div class="form-group full-width">
            <button type="submit" id="estimate-btn" class="submit-button cta">{t.estimateButton}</button>
        </div>
    </form>
    
    <div id="quote-result" class="quote-result-hidden">
        <div id="quote-details"></div>
        <h3 class="payment-title">{t.estimateButton}</h3>
        <div class="payment-buttons">
            <button type="button" id="pay-online-btn" class="submit-button cta">{t.payOnlineButton}</button>
            <button type="button" id="book-onboard-btn" class="secondary-button">{t.bookOnboardButton}</button>
        </div>
        <p id="form-status" class="status-message"></p>
    </div>
</div>

<style>
    :root { 
        --accent-color: #c5a47e; 
        --dark-color: #1a1a1a;
        --cta-bg: linear-gradient(45deg, var(--accent-color), #b19472);
        --cta-hover: linear-gradient(45deg, #b19472, #a08365);
    }
    .booking-wrapper { background: white; padding: 2.5rem; border-radius: 16px; box-shadow: 0 15px 40px rgba(0,0,0,0.1); max-width: 800px; margin: 3rem auto; font-family: 'Montserrat', sans-serif; }
    .form-title { font-size: 2.2em; text-align: center; color: var(--dark-color); }
    .form-subtitle { text-align: center; color: #666; margin: 0.5rem 0 2.5rem 0; }
    .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem 2rem; }
    .form-group { display: flex; flex-direction: column; }
    .full-width { grid-column: 1 / -1; }
    .step-title { font-size: 1.2em; color: var(--dark-color); border-bottom: 2px solid var(--accent-color); padding-bottom: 0.5rem; margin: 1rem 0; }
    label { margin-bottom: 0.5rem; font-weight: 600; color: #555; }
    input, textarea { background-color: #fff !important; color: #333 !important; padding: 0.9rem; font-size: 1rem; border-radius: 8px; border: 1px solid #ddd; }

    .privacy-notice { margin-top: 1rem; text-align: center; }
    .privacy-notice p { font-size: 0.85em; color: #777; line-height: 1.5; margin: 0; }
    .privacy-notice a { color: var(--accent-color); text-decoration: underline; }

    .submit-button { padding: 1rem; font-size: 1.1em; font-weight: bold; color: white; background: var(--dark-color); border: none; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; }
    .submit-button:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); }
    .submit-button.cta { background: var(--cta-bg); }
    .submit-button.cta:hover { background: var(--cta-hover); }

    .secondary-button { padding: 1rem; font-size: 1.1em; font-weight: bold; color: var(--dark-color); background: #f1f3f5; border: 2px solid #dee2e6; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; }
    .secondary-button:hover { background: #e9ecef; transform: translateY(-2px); }

    .quote-result-hidden { display: none; }
    .quote-result-visible { display: block; margin-top: 2.5rem; padding-top: 1.5rem; border-top: 1px solid #eee; text-align: center; }
    #quote-details .price { font-size: 1.8em; font-weight: bold; color: var(--accent-color); margin-top: 1rem; }
    .payment-title { font-size: 1.2em; margin: 2rem 0 1rem 0; }
    .payment-buttons { display: flex; flex-direction: column; gap: 1rem; }
    .status-message { text-align: center; font-weight: 500; min-height: 24px; margin-top: 1.5rem; }
    .error { color: #d9534f; }

    @media (max-width: 768px) { .form-grid { grid-template-columns: 1fr; } }
</style>

<script define:vars={{ t }}>
    import type { Stripe } from '@stripe/stripe-js';
    
    document.addEventListener('DOMContentLoaded', () => {
        let bookingData = {};
        let stripe: Stripe | null = null;

        const quoteForm = document.getElementById('quote-form') as HTMLFormElement;
        const quoteResultEl = document.getElementById('quote-result') as HTMLDivElement;
        const quoteDetailsEl = document.getElementById('quote-details') as HTMLDivElement;
        const payOnlineBtn = document.getElementById('pay-online-btn') as HTMLButtonElement;
        const bookOnboardBtn = document.getElementById('book-onboard-btn') as HTMLButtonElement;
        const statusEl = document.getElementById('form-status') as HTMLParagraphElement;
        
        function initStripe() {
            const stripePublishableKey = import.meta.env.PUBLIC_STRIPE_KEY;
            if (window.Stripe && stripePublishableKey) {
                stripe = window.Stripe(stripePublishableKey);
                console.log("‚úÖ Stripe est pr√™t !");
            } else {
                console.error("‚ùå La cl√© publique Stripe ou Stripe.js est manquant(e).");
            }
        }
        
        function initAutocomplete() {
            const pickupInput = document.getElementById('pickup');
            const dropoffInput = document.getElementById('dropoff');
            if (pickupInput && dropoffInput && window.google) {
                const options = {
                    componentRestrictions: { country: 'fr' },
                    fields: ["formatted_address"],
                };
                new window.google.maps.places.Autocomplete(pickupInput as HTMLInputElement, options);
                new window.google.maps.places.Autocomplete(dropoffInput as HTMLInputElement, options);
                console.log("‚úÖ Autocomplete initialis√© !");
            }
        }
        
        window.addEventListener('stripe-loaded', initStripe);
        window.addEventListener('maps-loaded', initAutocomplete);
        if (window.Stripe) initStripe();
        if (window.google?.maps?.places) initAutocomplete();

        quoteForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            quoteDetailsEl.innerHTML = {t.calculating};
            quoteResultEl.className = 'quote-result-visible';
            statusEl.textContent = '';
            
            const data = Object.fromEntries(new FormData(quoteForm).entries());
            try {
                const response = await fetch('/api/quote', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        pickup: data.pickup, 
                        dropoff: data.dropoff,
                        bookingTime: data.bookingTime 
                    }),
                });
                const quote = await response.json();
                if (!response.ok) throw new Error(quote.message || {t.calculationError});
                
                quoteDetailsEl.innerHTML = `<p class="price">Prix estim√© : ${quote.price.toFixed(2)} ‚Ç¨</p>`;
                bookingData = { ...data, ...quote };
            } catch(error) {
                quoteDetailsEl.innerHTML = `<p class="error">${error instanceof Error ? error.message : {t.unknownError}}</p>`;
            }
        });

        payOnlineBtn.addEventListener('click', async () => {
            if (!stripe) { 
                statusEl.textContent = {t.stripeNotReady};
                statusEl.className = 'status-message error';
                return;
            }
            statusEl.textContent = {t.preparingPayment};
            try {
                const response = await fetch('/api/create-stripe-session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData),
                });
                const session = await response.json();
                if (session.id) {
                    await stripe.redirectToCheckout({ sessionId: session.id });
                } else {
                    throw new Error({t.sessionIDMissing});
                }
            } catch (error) {
                statusEl.textContent = `Erreur de paiement : ${error instanceof Error ? error.message : {t.unknownError}}`;
                statusEl.className = 'status-message error';
            }
        });

        bookOnboardBtn.addEventListener('click', async () => {
            statusEl.textContent = {t.savingBooking};
            try {
                const response = await fetch('/api/book', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData),
                });
                if (!response.ok) throw new Error({t.bookingFailed});
                window.location.href = '/confirmation';
            } catch(error) {
                statusEl.textContent = `Erreur : ${error instanceof Error ? error.message : {t.unknownError}}`;
                statusEl.className = 'status-message error';
            }
        });
    });
</script>