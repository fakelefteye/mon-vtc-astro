---
// src/components/BookingForm.astro
---
<div id="booking-container" class="booking-wrapper">
    <form id="quote-form" class="form-grid">
        <div class="form-group full-width"><h3>1. Vos Coordonn√©es</h3></div>
        <div class="form-group"><label for="name">Nom & Pr√©nom</label><input type="text" id="name" name="name" required placeholder="Ex: Marie Dupont"></div>
        <div class="form-group"><label for="email">Adresse E-mail</label><input type="email" id="email" name="email" required placeholder="Pour recevoir le bon de r√©servation"></div>
        <div class="form-group"><label for="phone">T√©l√©phone</label><input type="tel" id="phone" name="phone" required placeholder="Pour vous contacter si besoin"></div>
        <div class="form-group"><label for="passengers">Nombre de passagers</label><input type="number" id="passengers" name="passengers" required min="1" max="4" value="1"></div>
        <div class="form-group full-width"><h3>2. D√©tails du Trajet</h3></div>
        <div class="form-group"><label for="pickup">Adresse de d√©part</label><input type="text" id="pickup" name="pickup" required placeholder="Commencez √† taper une adresse..."></div>
        <div class="form-group"><label for="dropoff">Adresse de destination</label><input type="text" id="dropoff" name="dropoff" required placeholder="Commencez √† taper une adresse..."></div>
        <div class="form-group full-width"><label for="booking-time">Date et heure de la prise en charge</label><input type="datetime-local" id="booking-time" name="bookingTime" required></div>
        <div class="form-group full-width"><label for="specialRequests">Demandes particuli√®res</label><textarea id="specialRequests" name="specialRequests" rows="3"></textarea></div>

        <div class="form-group full-width">
            <button type="submit" id="estimate-btn">Estimer le Prix</button>
        </div>
    </form>
    
    <div id="quote-result" style="display: none; margin-top: 1.5rem;">
        <div id="quote-details"></div>
        <div class="form-buttons full-width">
            <button type="button" id="pay-online-btn" class="cta-button">üí≥ Payer en ligne</button>
            <button type="button" id="book-onboard-btn">üöó R√©server & Payer √† bord</button>
        </div>
    </div>
</div>

<script>
    import type { Stripe } from '@stripe/stripe-js';

    let bookingData = {};
    let stripe: Stripe | null = null;
    
    const quoteForm = document.getElementById('quote-form');
    const quoteResultEl = document.getElementById('quote-result');
    const quoteDetailsEl = document.getElementById('quote-details');
    // MODIFI√â : S√©lection des nouveaux boutons
    const payOnlineBtn = document.getElementById('pay-online-btn');
    const bookOnboardBtn = document.getElementById('book-onboard-btn');
    
    // AJOUT√â : Initialisation de Stripe au chargement de la page
    document.addEventListener('DOMContentLoaded', () => {
        const stripePublishableKey = import.meta.env.PUBLIC_STRIPE_KEY;
        if (window.Stripe && stripePublishableKey) {
            stripe = window.Stripe(stripePublishableKey);
        } else {
            console.error("Cl√© publique Stripe non charg√©e. V√©rifiez votre .env et red√©marrez le serveur.");
        }
    });

    // La fonction d'autocompl√©tion reste la m√™me
    function initAutocomplete() {
        const pickupInput = document.getElementById('pickup');
        const dropoffInput = document.getElementById('dropoff');
        if (pickupInput && dropoffInput && window.google) {
            const options = { componentRestrictions: { country: 'fr' }, fields: ["formatted_address"] };
            new window.google.maps.places.Autocomplete(pickupInput, options);
            new window.google.maps.places.Autocomplete(dropoffInput, options);
        }
    }
    window.addEventListener('maps-loaded', initAutocomplete);
    if (window.google?.maps?.places) initAutocomplete();
    
    // Clic sur "Estimer le Prix"
    quoteForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        quoteDetailsEl.innerHTML = 'Calcul en cours...';
        quoteResultEl.style.display = 'block';

        const data = Object.fromEntries(new FormData(quoteForm).entries());

        try {
            const response = await fetch('/api/quote', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ pickup: data.pickup, dropoff: data.dropoff }),
            });
            const quote = await response.json();
            if (!response.ok) throw new Error(quote.message);
            
            quoteDetailsEl.innerHTML = `<p class="price"><strong>Prix estim√© :</strong> ${quote.price.toFixed(2)} ‚Ç¨</p>`;
            bookingData = { ...data, ...quote };
        } catch (error) {
            quoteDetailsEl.innerHTML = `<p class="error">${error.message}</p>`;
        }
    });

    // AJOUT√â : Clic sur "Payer en ligne"
    payOnlineBtn.addEventListener('click', async () => {
        if (!stripe) { alert("Le service de paiement n'est pas pr√™t."); return; }
        
        try {
            const response = await fetch('/api/create-stripe-session', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bookingData),
            });
            const session = await response.json();
            if (session.id) {
                await stripe.redirectToCheckout({ sessionId: session.id });
            } else {
                throw new Error("ID de session manquant.");
            }
        } catch (error) {
            alert(`Erreur de paiement : ${error.message}`);
        }
    });

    // Clic sur "R√©server et Payer √† bord" (ancien bouton "Confirmer")
    bookOnboardBtn.addEventListener('click', async () => {
        quoteDetailsEl.innerHTML += '<p>Enregistrement de la r√©servation...</p>';
        
        try {
            const response = await fetch('/api/book', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bookingData),
            });
            if (!response.ok) throw new Error("La r√©servation a √©chou√©.");
            window.location.href = '/confirmation';
        } catch (error) {
            alert(`Erreur : ${error.message}`);
        }
    });
</script>

<style>
    /* Vos styles sont conserv√©s, avec quelques ajouts pour les nouveaux boutons */
    .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; }
    .form-group { display: flex; flex-direction: column; }
    .full-width { grid-column: 1 / -1; }
    h3 { margin: 1rem 0 0.5rem 0; border-bottom: 2px solid var(--accent); padding-bottom: 0.5rem; }
    label { margin-bottom: 0.5rem; font-weight: bold; }
    input, textarea, button { padding: 0.8rem; font-size: 1rem; border-radius: 5px; border: 1px solid #ccc; font-family: 'Montserrat', sans-serif; }
    .form-buttons { display: flex; gap: 1rem; margin-top: 1rem; }
    .form-buttons button { flex: 1; font-weight: bold; cursor: pointer; }
    #pay-online-btn { background-color: var(--accent); color: white; border: none; }
    #book-onboard-btn { background-color: #f0f0f0; color: #333; border: 1px solid #ccc; }
    #estimate-btn { background: #333; color: white; font-weight: bold; border: none; cursor: pointer; }
    .price { font-size: 1.5em; font-weight: bold; color: var(--accent); text-align: center; }
    .error { color: red; text-align: center; }
</style>