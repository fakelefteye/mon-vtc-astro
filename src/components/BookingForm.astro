---
// src/components/BookingForm.astro
---
<div id="booking-container" class="booking-wrapper">
    <h2 class="form-title">Demande de Devis et R√©servation</h2>
    <p class="form-subtitle">Obtenez une estimation et r√©servez votre trajet.</p>

    <form id="quote-form" class="form-grid">
        <div class="form-group full-width"><h3 class="step-title">1. Vos Coordonn√©es</h3></div>
        <div class="form-group"><label for="name">Nom & Pr√©nom</label><input type="text" id="name" name="name" required placeholder="Ex: Marie Dupont"></div>
        <div class="form-group"><label for="phone">T√©l√©phone</label><input type="tel" id="phone" name="phone" required></div>
        <div class="form-group full-width"><label for="email">Adresse E-mail</label><input type="email" id="email" name="email" required placeholder="Pour recevoir le bon de r√©servation"></div>

        <div class="form-group full-width"><h3 class="step-title">2. Votre Trajet</h3></div>
        <div class="form-group"><label for="pickup">Adresse de d√©part</label><input type="text" id="pickup" name="pickup" required placeholder="Saisissez une adresse..."></div>
        <div class="form-group"><label for="dropoff">Adresse de destination</label><input type="text" id="dropoff" name="dropoff" required placeholder="Saisissez une adresse..."></div>
        <div class="form-group"><label for="booking-time">Date et heure</label><input type="datetime-local" id="booking-time" name="bookingTime" required></div>
        <div class="form-group"><label for="passengers">Passagers</label><input type="number" id="passengers" name="passengers" required min="1" max="4" value="1"></div>

        <div class="form-group full-width">
            <button type="submit" id="estimate-btn" class="submit-button">Estimer le Prix</button>
        </div>
    </form>
    
    <div id="quote-result" class="quote-result-hidden">
        <div id="quote-details"></div>
        <h3 class="payment-title">3. Confirmez votre r√©servation</h3>
        <div class="payment-buttons">
            <button type="button" id="pay-online-btn" class="submit-button cta">üí≥ Payer en ligne</button>
            <button type="button" id="book-onboard-btn" class="secondary-button">üöó R√©server et Payer √† bord</button>
        </div>
        <p id="form-status" class="status-message"></p>
    </div>
</div>

<style>
    :root { 
        --accent-color: #c5a47e; 
        --dark-color: #1a1a1a;
        --cta-bg: linear-gradient(45deg, var(--accent-color), #b19472);
        --cta-hover: linear-gradient(45deg, #b19472, #a08365);
    }
    .booking-wrapper { background: white; padding: 2.5rem; border-radius: 16px; box-shadow: 0 15px 40px rgba(0,0,0,0.1); max-width: 800px; margin: 3rem auto; font-family: 'Montserrat', sans-serif; }
    .form-title { font-size: 2.2em; text-align: center; color: var(--dark-color); }
    .form-subtitle { text-align: center; color: #666; margin: 0.5rem 0 2.5rem 0; }
    .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem 2rem; }
    .form-group { display: flex; flex-direction: column; }
    .full-width { grid-column: 1 / -1; }
    .step-title { font-size: 1.2em; color: var(--dark-color); border-bottom: 2px solid var(--accent-color); padding-bottom: 0.5rem; margin: 1rem 0; }
    label { margin-bottom: 0.5rem; font-weight: 600; color: #555; }
    input, textarea { background-color: #fff !important; color: #333 !important; padding: 0.9rem; font-size: 1rem; border-radius: 8px; border: 1px solid #ddd; }

    .submit-button { padding: 1rem; font-size: 1.1em; font-weight: bold; color: white; background: var(--dark-color); border: none; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; }
    .submit-button:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); }
    .submit-button.cta { background: var(--cta-bg); }
    .submit-button.cta:hover { background: var(--cta-hover); }

    .secondary-button { padding: 1rem; font-size: 1.1em; font-weight: bold; color: var(--dark-color); background: #f1f3f5; border: 2px solid #dee2e6; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; }
    .secondary-button:hover { background: #e9ecef; transform: translateY(-2px); }

    .quote-result-hidden { display: none; }
    .quote-result-visible { display: block; margin-top: 2.5rem; padding-top: 1.5rem; border-top: 1px solid #eee; text-align: center; }
    #quote-details .price { font-size: 1.8em; font-weight: bold; color: var(--accent-color); margin-top: 1rem; }
    .payment-title { font-size: 1.2em; margin: 2rem 0 1rem 0; }
    .payment-buttons { display: flex; flex-direction: column; gap: 1rem; }
    .status-message { text-align: center; font-weight: 500; min-height: 24px; margin-top: 1.5rem; }
    .error { color: #d9534f; }

    @media (max-width: 768px) { .form-grid { grid-template-columns: 1fr; } }
</style>

<script>
    import type { Stripe } from '@stripe/stripe-js';

    document.addEventListener('DOMContentLoaded', () => {
        let bookingData = {};
        let stripe: Stripe | null = null;

        const quoteForm = document.getElementById('quote-form') as HTMLFormElement;
        const quoteResultEl = document.getElementById('quote-result') as HTMLDivElement;
        const quoteDetailsEl = document.getElementById('quote-details') as HTMLDivElement;
        const payOnlineBtn = document.getElementById('pay-online-btn') as HTMLButtonElement;
        const bookOnboardBtn = document.getElementById('book-onboard-btn') as HTMLButtonElement;
        const statusEl = document.getElementById('form-status') as HTMLParagraphElement;
        
        const stripePublishableKey = import.meta.env.PUBLIC_STRIPE_KEY;
        if (window.Stripe && stripePublishableKey) {
            stripe = window.Stripe(stripePublishableKey);
        } else {
            console.error("Stripe.js ou la cl√© publique n'est pas charg√©(e).");
        }
        
        // ‚úÖ CORRECTION : La fonction d'autocompl√©tion est restaur√©e ici.
        function initAutocomplete() {
            const pickupInput = document.getElementById('pickup');
            const dropoffInput = document.getElementById('dropoff');
            if (pickupInput && dropoffInput && window.google) {
                const options = {
                    componentRestrictions: { country: 'fr' },
                    fields: ["formatted_address"],
                };
                new window.google.maps.places.Autocomplete(pickupInput as HTMLInputElement, options);
                new window.google.maps.places.Autocomplete(dropoffInput as HTMLInputElement, options);
                console.log("Autocomplete initialis√© !");
            }
        }

        // On √©coute l'√©v√©nement de Layout.astro pour lancer l'autocompl√©tion
        window.addEventListener('maps-loaded', initAutocomplete);
        // On ex√©cute aussi au cas o√π le script serait d√©j√† charg√©
        if (window.google?.maps?.places) {
            initAutocomplete();
        }

        quoteForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            quoteDetailsEl.innerHTML = 'Calcul en cours...';
            quoteResultEl.className = 'quote-result-visible';
            statusEl.textContent = '';
            
            const data = Object.fromEntries(new FormData(quoteForm).entries());
            try {
                const response = await fetch('/api/quote', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        pickup: data.pickup, 
                        dropoff: data.dropoff,
                        bookingTime: data.bookingTime 
                    }),
                });
                const quote = await response.json();
                if (!response.ok) throw new Error(quote.message || "Erreur de calcul.");
                
                quoteDetailsEl.innerHTML = `<p class="price">Prix estim√© : ${quote.price.toFixed(2)} ‚Ç¨</p>`;
                bookingData = { ...data, ...quote };
            } catch(error) {
                quoteDetailsEl.innerHTML = `<p class="error">${error instanceof Error ? error.message : "Erreur inconnue"}</p>`;
            }
        });

        payOnlineBtn.addEventListener('click', async () => {
            if (!stripe) { 
                statusEl.textContent = "Le service de paiement n'est pas pr√™t. Veuillez rafra√Æchir la page.";
                statusEl.className = 'status-message error';
                return;
            }
            statusEl.textContent = "Pr√©paration du paiement...";
            
            try {
                const response = await fetch('/api/create-stripe-session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData),
                });
                const session = await response.json();
                if (session.id) {
                    await stripe.redirectToCheckout({ sessionId: session.id });
                } else {
                    throw new Error("ID de session manquant.");
                }
            } catch (error) {
                statusEl.textContent = `Erreur de paiement : ${error instanceof Error ? error.message : "Inconnue"}`;
                statusEl.className = 'status-message error';
            }
        });

        bookOnboardBtn.addEventListener('click', async () => {
            statusEl.textContent = 'Enregistrement de la r√©servation...';
            try {
                const response = await fetch('/api/book', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData),
                });
                if (!response.ok) throw new Error("La r√©servation a √©chou√©.");
                window.location.href = '/confirmation';
            } catch(error) {
                statusEl.textContent = `Erreur : ${error instanceof Error ? error.message : "Inconnue"}`;
                statusEl.className = 'status-message error';
            }
        });
    });
</script>