---
// src/components/BookingForm.astro

// On r√©cup√®re le chemin courant (comme ton Header)
const { currentPath = '/' } = Astro.props;

// M√™me logique que dans Header.astro
const lang = currentPath.startsWith('/en/')
  ? 'en'
  : currentPath.startsWith('/es/')
  ? 'es'
  : 'fr';

// üí¨ Dictionnaire complet de traduction
const translations = {
  fr: {
    formTitle: "Demande de Devis et R√©servation",
    formSubtitle: "Obtenez une estimation et r√©servez votre trajet.",
    step1: "1. Vos Coordonn√©es",
    name: "Nom & Pr√©nom",
    namePlaceholder: "Ex: Marie Dupont",
    email: "Adresse E-mail",
    emailPlaceholder: "Pour recevoir le bon de r√©servation",
    phone: "T√©l√©phone",
    phonePlaceholder: "Pour vous contacter si besoin",
    passengers: "Nombre de passagers",
    step2: "2. D√©tails du Trajet",
    pickup: "Adresse de d√©part",
    dropoff: "Adresse de destination",
    addressPlaceholder: "Commencez √† taper une adresse...",
    datetime: "Date et heure de la prise en charge",
    specialRequests: "Demandes particuli√®res",
    specialRequestsPlaceholder: "Ex: Si√®ge b√©b√©, bagages volumineux...",
    privacy: "En soumettant ce formulaire, vous reconnaissez avoir pris connaissance de notre",
    privacyLink: "politique de confidentialit√©",
    estimate: "Estimer le Prix",
    step3: "3. Confirmez votre r√©servation",
    payOnline: "üí≥ Payer en ligne",
    bookOnboard: "üöó R√©server & Payer √† bord",
  },
  en: {
    formTitle: "Quote Request & Booking",
    formSubtitle: "Get an estimate and book your trip.",
    step1: "1. Your Details",
    name: "Full Name",
    namePlaceholder: "Ex: Mary Smith",
    email: "Email Address",
    emailPlaceholder: "To receive your booking confirmation",
    phone: "Phone",
    phonePlaceholder: "So we can contact you if needed",
    passengers: "Number of passengers",
    step2: "2. Trip Details",
    pickup: "Pickup address",
    dropoff: "Drop-off address",
    addressPlaceholder: "Start typing an address...",
    datetime: "Pickup date and time",
    specialRequests: "Special requests",
    specialRequestsPlaceholder: "Ex: Baby seat, bulky luggage...",
    privacy: "By submitting this form, you acknowledge that you have read and accepted our",
    privacyLink: "privacy policy",
    estimate: "Get Estimate",
    step3: "3. Confirm your booking",
    payOnline: "üí≥ Pay Online",
    bookOnboard: "üöó Book & Pay Onboard",
  },
  es: {
    formTitle: "Solicitud de Presupuesto y Reserva",
    formSubtitle: "Obt√©n una estimaci√≥n y reserva tu viaje.",
    step1: "1. Tus Datos",
    name: "Nombre y Apellidos",
    namePlaceholder: "Ej: Mar√≠a L√≥pez",
    email: "Correo Electr√≥nico",
    emailPlaceholder: "Para recibir la confirmaci√≥n de reserva",
    phone: "Tel√©fono",
    phonePlaceholder: "Para contactarte si es necesario",
    passengers: "N√∫mero de pasajeros",
    step2: "2. Detalles del Viaje",
    pickup: "Direcci√≥n de salida",
    dropoff: "Direcci√≥n de destino",
    addressPlaceholder: "Empieza a escribir una direcci√≥n...",
    datetime: "Fecha y hora de recogida",
    specialRequests: "Peticiones especiales",
    specialRequestsPlaceholder: "Ej: Asiento para beb√©, equipaje voluminoso...",
    privacy: "Al enviar este formulario, reconoces haber le√≠do y aceptado nuestra",
    privacyLink: "pol√≠tica de privacidad",
    estimate: "Calcular Precio",
    step3: "3. Confirma tu reserva",
    payOnline: "üí≥ Pagar en l√≠nea",
    bookOnboard: "üöó Reservar y Pagar a Bordo",
  },
};

// üß≠ S√©lectionne directement l‚Äôobjet pour la langue active
const t = translations[lang];
---

<div id="booking-container" class="booking-wrapper">
  <h2 class="form-title">{t.formTitle}</h2>
  <p class="form-subtitle">{t.formSubtitle}</p>

  <form id="quote-form" class="form-grid">
    <div class="form-group full-width"><h3 class="step-title">{t.step1}</h3></div>
    
    <div class="form-group full-width">
      <label for="name">{t.name}</label>
      <input type="text" id="name" name="name" required placeholder={t.namePlaceholder} />
    </div>

    <div class="form-group full-width">
      <label for="email">{t.email}</label>
      <input type="email" id="email" name="email" required placeholder={t.emailPlaceholder} />
    </div>

    <div class="form-group">
      <label for="phone">{t.phone}</label>
      <input type="tel" id="phone" name="phone" required placeholder={t.phonePlaceholder} />
    </div>

    <div class="form-group">
      <label for="passengers">{t.passengers}</label>
      <input type="number" id="passengers" name="passengers" required min="1" max="4" value="1" />
    </div>

    <div class="form-group full-width"><h3 class="step-title">{t.step2}</h3></div>

    <div class="form-group"><label for="pickup">{t.pickup}</label><input type="text" id="pickup" name="pickup" required placeholder={t.addressPlaceholder} /></div>
    <div class="form-group"><label for="dropoff">{t.dropoff}</label><input type="text" id="dropoff" name="dropoff" required placeholder={t.addressPlaceholder} /></div>
    <div class="form-group full-width"><label for="booking-time">{t.datetime}</label><input type="datetime-local" id="booking-time" name="bookingTime" required /></div>
    <div class="form-group full-width"><label for="specialRequests">{t.specialRequests}</label><textarea id="specialRequests" name="specialRequests" rows="3" placeholder={t.specialRequestsPlaceholder}></textarea></div>

    <div class="form-group full-width privacy-notice">
      <p>{t.privacy} <a href="/politique-confidentialite" target="_blank">{t.privacyLink}</a>.</p>
    </div>

    <div class="form-group full-width">
      <button type="submit" id="estimate-btn" class="submit-button cta">{t.estimate}</button>
    </div>
  </form>

  <div id="quote-result" class="quote-result-hidden">
    <div id="quote-details"></div>
    <h3 class="payment-title">{t.step3}</h3>
    <div class="payment-buttons">
      <button type="button" id="pay-online-btn" class="submit-button cta">{t.payOnline}</button>
      <button type="button" id="book-onboard-btn" class="secondary-button">{t.bookOnboard}</button>
    </div>
    <p id="form-status" class="status-message"></p>
  </div>
</div>




<style>
    :root { 
        --accent-color: #007bff; 
        --dark-color: #1a1a1a;
         /* D√©grad√©s pour le bouton "Payer en ligne" (CTA) */
        --cta-bg: linear-gradient(45deg, #007bff, #6f42c1); /* Bleu vers Violet */
        --cta-hover: linear-gradient(45deg, #6f42c1, #e83e8c); /* Violet vers Rose */
        
        /* Vous pouvez ajuster ces couleurs avec vos propres codes HEX
           Exemples de palettes color√©es :
           - Chaud et √©nergique : linear-gradient(45deg, #FF5733, #FFC300); (Orange √† Jaune)
           - Frais et moderne : linear-gradient(45deg, #28a745, #17a2b8); (Vert √† Cyan)
           - Joyeux et ludique : linear-gradient(45deg, #fd7e14, #ffc107); (Orange √† Jaune d'Or)
        */
    }
    .booking-wrapper { background: white; padding: 2.5rem; border-radius: 16px; box-shadow: 0 15px 40px rgba(0,0,0,0.1); max-width: 800px; margin: 3rem auto; font-family: 'Montserrat', sans-serif; }
    .form-title { font-size: 2.2em; text-align: center; color: var(--dark-color); }
    .form-subtitle { text-align: center; color: #666; margin: 0.5rem 0 2.5rem 0; }
    .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem 2rem; }
    .form-group { display: flex; flex-direction: column; }
    .full-width { grid-column: 1 / -1; }
    .step-title { font-size: 1.2em; color: var(--dark-color); border-bottom: 2px solid var(--accent-color); padding-bottom: 0.5rem; margin: 1rem 0; }
    label { margin-bottom: 0.5rem; font-weight: 600; color: #555; }
    input, textarea { background-color: #fff !important; color: #333 !important; padding: 0.9rem; font-size: 1rem; border-radius: 8px; border: 1px solid #ddd; }

    .privacy-notice { margin-top: 1rem; text-align: center; }
    .privacy-notice p { font-size: 0.85em; color: #777; line-height: 1.5; margin: 0; }
    .privacy-notice a { color: var(--accent-color); text-decoration: underline; }

    .submit-button { padding: 1rem; font-size: 1.1em; font-weight: bold; color: white; background: var(--dark-color); border: none; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; }
    .submit-button:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); }
    .submit-button.cta { background: var(--cta-bg); }
    .submit-button.cta:hover { background: var(--cta-hover); }

    .secondary-button { padding: 1rem; font-size: 1.1em; font-weight: bold; color: var(--dark-color); background: #f1f3f5; border: 2px solid #dee2e6; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; }
    .secondary-button:hover { background: #e9ecef; transform: translateY(-2px); }

    .quote-result-hidden { display: none; }
    .quote-result-visible { display: block; margin-top: 2.5rem; padding-top: 1.5rem; border-top: 1px solid #eee; text-align: center; }
    #quote-details .price { font-size: 1.8em; font-weight: bold; color: var(--accent-color); margin-top: 1rem; }
    .payment-title { font-size: 1.2em; margin: 2rem 0 1rem 0; }
    .payment-buttons { display: flex; flex-direction: column; gap: 1rem; }
    .status-message { text-align: center; font-weight: 500; min-height: 24px; margin-top: 1.5rem; }
    .error { color: #d9534f; }

    @media (max-width: 768px) { .form-grid { grid-template-columns: 1fr; } }
</style>

<script>
    import type { Stripe } from '@stripe/stripe-js';
    
    document.addEventListener('DOMContentLoaded', () => {
        let bookingData = {};
        let stripe: Stripe | null = null;

        const quoteForm = document.getElementById('quote-form') as HTMLFormElement;
        const quoteResultEl = document.getElementById('quote-result') as HTMLDivElement;
        const quoteDetailsEl = document.getElementById('quote-details') as HTMLDivElement;
        const payOnlineBtn = document.getElementById('pay-online-btn') as HTMLButtonElement;
        const bookOnboardBtn = document.getElementById('book-onboard-btn') as HTMLButtonElement;
        const statusEl = document.getElementById('form-status') as HTMLParagraphElement;
        
        function initStripe() {
            const stripePublishableKey = import.meta.env.PUBLIC_STRIPE_KEY;
            if (window.Stripe && stripePublishableKey) {
                stripe = window.Stripe(stripePublishableKey);
                console.log("‚úÖ Stripe est pr√™t !");
            } else {
                console.error("‚ùå La cl√© publique Stripe ou Stripe.js est manquant(e).");
            }
        }
        
        function initAutocomplete() {
            const pickupInput = document.getElementById('pickup');
            const dropoffInput = document.getElementById('dropoff');
            if (pickupInput && dropoffInput && window.google) {
                const options = {
                    componentRestrictions: { country: 'fr' },
                    fields: ["formatted_address"],
                };
                new window.google.maps.places.Autocomplete(pickupInput as HTMLInputElement, options);
                new window.google.maps.places.Autocomplete(dropoffInput as HTMLInputElement, options);
                console.log("‚úÖ Autocomplete initialis√© !");
            }
        }
        
        window.addEventListener('stripe-loaded', initStripe);
        window.addEventListener('maps-loaded', initAutocomplete);
        if (window.Stripe) initStripe();
        if (window.google?.maps?.places) initAutocomplete();

        quoteForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            quoteDetailsEl.innerHTML = 'Calcul en cours...';
            quoteResultEl.className = 'quote-result-visible';
            statusEl.textContent = '';
            
            const data = Object.fromEntries(new FormData(quoteForm).entries());
            try {
                const response = await fetch('/api/quote', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        pickup: data.pickup, 
                        dropoff: data.dropoff,
                        bookingTime: data.bookingTime 
                    }),
                });
                const quote = await response.json();
                if (!response.ok) throw new Error(quote.message || "Erreur de calcul.");
                
                quoteDetailsEl.innerHTML = `<p class="price">Prix estim√© : ${quote.price.toFixed(2)} ‚Ç¨</p>`;
                bookingData = { ...data, ...quote };
            } catch(error) {
                quoteDetailsEl.innerHTML = `<p class="error">${error instanceof Error ? error.message : "Erreur inconnue"}</p>`;
            }
        });

        payOnlineBtn.addEventListener('click', async () => {
            if (!stripe) { 
                statusEl.textContent = "Le service de paiement n'est pas pr√™t. Veuillez rafra√Æchir la page.";
                statusEl.className = 'status-message error';
                return;
            }
            statusEl.textContent = "Pr√©paration du paiement...";
            try {
                const response = await fetch('/api/create-stripe-session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData),
                });
                const session = await response.json();
                if (session.id) {
                    await stripe.redirectToCheckout({ sessionId: session.id });
                } else {
                    throw new Error("ID de session manquant.");
                }
            } catch (error) {
                statusEl.textContent = `Erreur de paiement : ${error instanceof Error ? error.message : "Inconnue"}`;
                statusEl.className = 'status-message error';
            }
        });

        bookOnboardBtn.addEventListener('click', async () => {
            statusEl.textContent = 'Enregistrement de la r√©servation...';
            try {
                const response = await fetch('/api/book', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookingData),
                });
                if (!response.ok) throw new Error("La r√©servation a √©chou√©.");
                window.location.href = '/confirmation';
            } catch(error) {
                statusEl.textContent = `Erreur : ${error instanceof Error ? error.message : "Inconnue"}`;
                statusEl.className = 'status-message error';
            }
        });
    });
</script>